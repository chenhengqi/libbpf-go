// AUTOGENERATED BY LIBBPF-GO-GEN
// DO NOT EDIT
package libbpf

// #include <bpf/libbpf.h>
import "C"
import "unsafe"

var _ unsafe.Pointer

// Libbpf_strerror is a wrapper of libbpf_strerror
//     int libbpf_strerror(int err, char *buf, size_t size)
func Libbpf_strerror(err int32, buf *C.char, size uint) int32 {
	return C.libbpf_strerror()
}

// Libbpf_set_print is a wrapper of libbpf_set_print
//     libbpf_print_fn_t libbpf_set_print(libbpf_print_fn_t fn)
func Libbpf_set_print(fn C.libbpf_print_fn_t) C.libbpf_print_fn_t {
	return C.libbpf_set_print()
}

// Bpf_object__open is a wrapper of bpf_object__open
//     struct bpf_object *bpf_object__open(const char *path)
func Bpf_object__open(path string) *Struct_bpf_object {
	return C.bpf_object__open()
}

// Bpf_object__open_file is a wrapper of bpf_object__open_file
//     struct bpf_object * bpf_object__open_file(const char *path, const struct bpf_object_open_opts *opts)
func Bpf_object__open_file(path string, opts *Struct_bpf_object_open_opts) *Struct_bpf_object {
	return C.bpf_object__open_file()
}

// Bpf_object__open_mem is a wrapper of bpf_object__open_mem
//     struct bpf_object * bpf_object__open_mem(const void *obj_buf, size_t obj_buf_sz, const struct bpf_object_open_opts *opts)
func Bpf_object__open_mem(obj_buf unsafe.Pointer, obj_buf_sz uint, opts *Struct_bpf_object_open_opts) *Struct_bpf_object {
	return C.bpf_object__open_mem()
}

// Bpf_object__open_buffer is a wrapper of bpf_object__open_buffer
//     struct bpf_object * bpf_object__open_buffer(const void *obj_buf, size_t obj_buf_sz, const char *name)
func Bpf_object__open_buffer(obj_buf unsafe.Pointer, obj_buf_sz uint, name string) *Struct_bpf_object {
	return C.bpf_object__open_buffer()
}

// Bpf_object__open_xattr is a wrapper of bpf_object__open_xattr
//     struct bpf_object * bpf_object__open_xattr(struct bpf_object_open_attr *attr)
func Bpf_object__open_xattr(attr *Struct_bpf_object_open_attr) *Struct_bpf_object {
	return C.bpf_object__open_xattr()
}

// Bpf_object__pin_maps is a wrapper of bpf_object__pin_maps
//     int bpf_object__pin_maps(struct bpf_object *obj, const char *path)
func Bpf_object__pin_maps(obj *Struct_bpf_object, path string) int32 {
	return C.bpf_object__pin_maps()
}

// Bpf_object__unpin_maps is a wrapper of bpf_object__unpin_maps
//     int bpf_object__unpin_maps(struct bpf_object *obj, const char *path)
func Bpf_object__unpin_maps(obj *Struct_bpf_object, path string) int32 {
	return C.bpf_object__unpin_maps()
}

// Bpf_object__pin_programs is a wrapper of bpf_object__pin_programs
//     int bpf_object__pin_programs(struct bpf_object *obj, const char *path)
func Bpf_object__pin_programs(obj *Struct_bpf_object, path string) int32 {
	return C.bpf_object__pin_programs()
}

// Bpf_object__unpin_programs is a wrapper of bpf_object__unpin_programs
//     int bpf_object__unpin_programs(struct bpf_object *obj, const char *path)
func Bpf_object__unpin_programs(obj *Struct_bpf_object, path string) int32 {
	return C.bpf_object__unpin_programs()
}

// Bpf_object__pin is a wrapper of bpf_object__pin
//     int bpf_object__pin(struct bpf_object *object, const char *path)
func Bpf_object__pin(object *Struct_bpf_object, path string) int32 {
	return C.bpf_object__pin()
}

// Bpf_object__close is a wrapper of bpf_object__close
//     void bpf_object__close(struct bpf_object *object)
func Bpf_object__close(object *Struct_bpf_object)  {
	return C.bpf_object__close()
}

// Bpf_object__load is a wrapper of bpf_object__load
//     int bpf_object__load(struct bpf_object *obj)
func Bpf_object__load(obj *Struct_bpf_object) int32 {
	return C.bpf_object__load()
}

// Bpf_object__load_xattr is a wrapper of bpf_object__load_xattr
//     int bpf_object__load_xattr(struct bpf_object_load_attr *attr)
func Bpf_object__load_xattr(attr *Struct_bpf_object_load_attr) int32 {
	return C.bpf_object__load_xattr()
}

// Bpf_object__unload is a wrapper of bpf_object__unload
//     int bpf_object__unload(struct bpf_object *obj)
func Bpf_object__unload(obj *Struct_bpf_object) int32 {
	return C.bpf_object__unload()
}

// Bpf_object__name is a wrapper of bpf_object__name
//     const char *bpf_object__name(const struct bpf_object *obj)
func Bpf_object__name(obj *Struct_bpf_object) string {
	return C.bpf_object__name()
}

// Bpf_object__kversion is a wrapper of bpf_object__kversion
//     unsigned int bpf_object__kversion(const struct bpf_object *obj)
func Bpf_object__kversion(obj *Struct_bpf_object) int32 {
	return C.bpf_object__kversion()
}

// Bpf_object__set_kversion is a wrapper of bpf_object__set_kversion
//     int bpf_object__set_kversion(struct bpf_object *obj, __u32 kern_version)
func Bpf_object__set_kversion(obj *Struct_bpf_object, kern_version uint32) int32 {
	return C.bpf_object__set_kversion()
}

// Bpf_object__btf is a wrapper of bpf_object__btf
//     struct btf *bpf_object__btf(const struct bpf_object *obj)
func Bpf_object__btf(obj *Struct_bpf_object) *Struct_btf {
	return C.bpf_object__btf()
}

// Bpf_object__btf_fd is a wrapper of bpf_object__btf_fd
//     int bpf_object__btf_fd(const struct bpf_object *obj)
func Bpf_object__btf_fd(obj *Struct_bpf_object) int32 {
	return C.bpf_object__btf_fd()
}

// Bpf_object__find_program_by_title is a wrapper of bpf_object__find_program_by_title
//     struct bpf_program * bpf_object__find_program_by_title(const struct bpf_object *obj, const char *title)
func Bpf_object__find_program_by_title(obj *Struct_bpf_object, title string) *Struct_bpf_program {
	return C.bpf_object__find_program_by_title()
}

// Bpf_object__find_program_by_name is a wrapper of bpf_object__find_program_by_name
//     struct bpf_program * bpf_object__find_program_by_name(const struct bpf_object *obj, const char *name)
func Bpf_object__find_program_by_name(obj *Struct_bpf_object, name string) *Struct_bpf_program {
	return C.bpf_object__find_program_by_name()
}

// Bpf_object__next is a wrapper of bpf_object__next
//     struct bpf_object *bpf_object__next(struct bpf_object *prev)
func Bpf_object__next(prev *Struct_bpf_object) *Struct_bpf_object {
	return C.bpf_object__next()
}

// Bpf_object__set_priv is a wrapper of bpf_object__set_priv
//     int bpf_object__set_priv(struct bpf_object *obj, void *priv, bpf_object_clear_priv_t clear_priv)
func Bpf_object__set_priv(obj *Struct_bpf_object, priv unsafe.Pointer, clear_priv C.bpf_object_clear_priv_t) int32 {
	return C.bpf_object__set_priv()
}

// Bpf_object__priv is a wrapper of bpf_object__priv
//     void *bpf_object__priv(const struct bpf_object *prog)
func Bpf_object__priv(prog *Struct_bpf_object) unsafe.Pointer {
	return C.bpf_object__priv()
}

// Libbpf_prog_type_by_name is a wrapper of libbpf_prog_type_by_name
//     int libbpf_prog_type_by_name(const char *name, enum bpf_prog_type *prog_type, enum bpf_attach_type *expected_attach_type)
func Libbpf_prog_type_by_name(name string, prog_type Enum_bpf_prog_type, expected_attach_type Enum_bpf_attach_type) int32 {
	return C.libbpf_prog_type_by_name()
}

// Libbpf_attach_type_by_name is a wrapper of libbpf_attach_type_by_name
//     int libbpf_attach_type_by_name(const char *name, enum bpf_attach_type *attach_type)
func Libbpf_attach_type_by_name(name string, attach_type Enum_bpf_attach_type) int32 {
	return C.libbpf_attach_type_by_name()
}

// Libbpf_find_vmlinux_btf_id is a wrapper of libbpf_find_vmlinux_btf_id
//     int libbpf_find_vmlinux_btf_id(const char *name, enum bpf_attach_type attach_type)
func Libbpf_find_vmlinux_btf_id(name string, attach_type Enum_bpf_attach_type) int32 {
	return C.libbpf_find_vmlinux_btf_id()
}

// Bpf_program__next is a wrapper of bpf_program__next
//     struct bpf_program *bpf_program__next(struct bpf_program *prog, const struct bpf_object *obj)
func Bpf_program__next(prog *Struct_bpf_program, obj *Struct_bpf_object) *Struct_bpf_program {
	return C.bpf_program__next()
}

// Bpf_program__prev is a wrapper of bpf_program__prev
//     struct bpf_program *bpf_program__prev(struct bpf_program *prog, const struct bpf_object *obj)
func Bpf_program__prev(prog *Struct_bpf_program, obj *Struct_bpf_object) *Struct_bpf_program {
	return C.bpf_program__prev()
}

// Bpf_program__set_priv is a wrapper of bpf_program__set_priv
//     int bpf_program__set_priv(struct bpf_program *prog, void *priv, bpf_program_clear_priv_t clear_priv)
func Bpf_program__set_priv(prog *Struct_bpf_program, priv unsafe.Pointer, clear_priv C.bpf_program_clear_priv_t) int32 {
	return C.bpf_program__set_priv()
}

// Bpf_program__priv is a wrapper of bpf_program__priv
//     void *bpf_program__priv(const struct bpf_program *prog)
func Bpf_program__priv(prog *Struct_bpf_program) unsafe.Pointer {
	return C.bpf_program__priv()
}

// Bpf_program__set_ifindex is a wrapper of bpf_program__set_ifindex
//     void bpf_program__set_ifindex(struct bpf_program *prog, __u32 ifindex)
func Bpf_program__set_ifindex(prog *Struct_bpf_program, ifindex uint32)  {
	return C.bpf_program__set_ifindex()
}

// Bpf_program__name is a wrapper of bpf_program__name
//     const char *bpf_program__name(const struct bpf_program *prog)
func Bpf_program__name(prog *Struct_bpf_program) string {
	return C.bpf_program__name()
}

// Bpf_program__section_name is a wrapper of bpf_program__section_name
//     const char *bpf_program__section_name(const struct bpf_program *prog)
func Bpf_program__section_name(prog *Struct_bpf_program) string {
	return C.bpf_program__section_name()
}

// Bpf_program__title is a wrapper of bpf_program__title
//      const char *bpf_program__title(const struct bpf_program *prog, bool needs_copy)
func Bpf_program__title(prog *Struct_bpf_program, needs_copy bool) string {
	return C.bpf_program__title()
}

// Bpf_program__autoload is a wrapper of bpf_program__autoload
//     bool bpf_program__autoload(const struct bpf_program *prog)
func Bpf_program__autoload(prog *Struct_bpf_program) bool {
	return C.bpf_program__autoload()
}

// Bpf_program__set_autoload is a wrapper of bpf_program__set_autoload
//     int bpf_program__set_autoload(struct bpf_program *prog, bool autoload)
func Bpf_program__set_autoload(prog *Struct_bpf_program, autoload bool) int32 {
	return C.bpf_program__set_autoload()
}

// Bpf_program__size is a wrapper of bpf_program__size
//     size_t bpf_program__size(const struct bpf_program *prog)
func Bpf_program__size(prog *Struct_bpf_program) uint {
	return C.bpf_program__size()
}

// Bpf_program__load is a wrapper of bpf_program__load
//     int bpf_program__load(struct bpf_program *prog, char *license, __u32 kern_version)
func Bpf_program__load(prog *Struct_bpf_program, license *C.char, kern_version uint32) int32 {
	return C.bpf_program__load()
}

// Bpf_program__fd is a wrapper of bpf_program__fd
//     int bpf_program__fd(const struct bpf_program *prog)
func Bpf_program__fd(prog *Struct_bpf_program) int32 {
	return C.bpf_program__fd()
}

// Bpf_program__pin_instance is a wrapper of bpf_program__pin_instance
//     int bpf_program__pin_instance(struct bpf_program *prog, const char *path, int instance)
func Bpf_program__pin_instance(prog *Struct_bpf_program, path string, instance int32) int32 {
	return C.bpf_program__pin_instance()
}

// Bpf_program__unpin_instance is a wrapper of bpf_program__unpin_instance
//     int bpf_program__unpin_instance(struct bpf_program *prog, const char *path, int instance)
func Bpf_program__unpin_instance(prog *Struct_bpf_program, path string, instance int32) int32 {
	return C.bpf_program__unpin_instance()
}

// Bpf_program__pin is a wrapper of bpf_program__pin
//     int bpf_program__pin(struct bpf_program *prog, const char *path)
func Bpf_program__pin(prog *Struct_bpf_program, path string) int32 {
	return C.bpf_program__pin()
}

// Bpf_program__unpin is a wrapper of bpf_program__unpin
//     int bpf_program__unpin(struct bpf_program *prog, const char *path)
func Bpf_program__unpin(prog *Struct_bpf_program, path string) int32 {
	return C.bpf_program__unpin()
}

// Bpf_program__unload is a wrapper of bpf_program__unload
//     void bpf_program__unload(struct bpf_program *prog)
func Bpf_program__unload(prog *Struct_bpf_program)  {
	return C.bpf_program__unload()
}

// Bpf_link__open is a wrapper of bpf_link__open
//     struct bpf_link *bpf_link__open(const char *path)
func Bpf_link__open(path string) *Struct_bpf_link {
	return C.bpf_link__open()
}

// Bpf_link__fd is a wrapper of bpf_link__fd
//     int bpf_link__fd(const struct bpf_link *link)
func Bpf_link__fd(link *Struct_bpf_link) int32 {
	return C.bpf_link__fd()
}

// Bpf_link__pin_path is a wrapper of bpf_link__pin_path
//     const char *bpf_link__pin_path(const struct bpf_link *link)
func Bpf_link__pin_path(link *Struct_bpf_link) string {
	return C.bpf_link__pin_path()
}

// Bpf_link__pin is a wrapper of bpf_link__pin
//     int bpf_link__pin(struct bpf_link *link, const char *path)
func Bpf_link__pin(link *Struct_bpf_link, path string) int32 {
	return C.bpf_link__pin()
}

// Bpf_link__unpin is a wrapper of bpf_link__unpin
//     int bpf_link__unpin(struct bpf_link *link)
func Bpf_link__unpin(link *Struct_bpf_link) int32 {
	return C.bpf_link__unpin()
}

// Bpf_link__update_program is a wrapper of bpf_link__update_program
//     int bpf_link__update_program(struct bpf_link *link, struct bpf_program *prog)
func Bpf_link__update_program(link *Struct_bpf_link, prog *Struct_bpf_program) int32 {
	return C.bpf_link__update_program()
}

// Bpf_link__disconnect is a wrapper of bpf_link__disconnect
//     void bpf_link__disconnect(struct bpf_link *link)
func Bpf_link__disconnect(link *Struct_bpf_link)  {
	return C.bpf_link__disconnect()
}

// Bpf_link__detach is a wrapper of bpf_link__detach
//     int bpf_link__detach(struct bpf_link *link)
func Bpf_link__detach(link *Struct_bpf_link) int32 {
	return C.bpf_link__detach()
}

// Bpf_link__destroy is a wrapper of bpf_link__destroy
//     int bpf_link__destroy(struct bpf_link *link)
func Bpf_link__destroy(link *Struct_bpf_link) int32 {
	return C.bpf_link__destroy()
}

// Bpf_program__attach is a wrapper of bpf_program__attach
//     struct bpf_link * bpf_program__attach(struct bpf_program *prog)
func Bpf_program__attach(prog *Struct_bpf_program) *Struct_bpf_link {
	return C.bpf_program__attach()
}

// Bpf_program__attach_perf_event is a wrapper of bpf_program__attach_perf_event
//     struct bpf_link * bpf_program__attach_perf_event(struct bpf_program *prog, int pfd)
func Bpf_program__attach_perf_event(prog *Struct_bpf_program, pfd int32) *Struct_bpf_link {
	return C.bpf_program__attach_perf_event()
}

// Bpf_program__attach_kprobe is a wrapper of bpf_program__attach_kprobe
//     struct bpf_link * bpf_program__attach_kprobe(struct bpf_program *prog, bool retprobe, const char *func_name)
func Bpf_program__attach_kprobe(prog *Struct_bpf_program, retprobe bool, func_name string) *Struct_bpf_link {
	return C.bpf_program__attach_kprobe()
}

// Bpf_program__attach_uprobe is a wrapper of bpf_program__attach_uprobe
//     struct bpf_link * bpf_program__attach_uprobe(struct bpf_program *prog, bool retprobe, pid_t pid, const char *binary_path, size_t func_offset)
func Bpf_program__attach_uprobe(prog *Struct_bpf_program, retprobe bool, pid int32, binary_path string, func_offset uint) *Struct_bpf_link {
	return C.bpf_program__attach_uprobe()
}

// Bpf_program__attach_tracepoint is a wrapper of bpf_program__attach_tracepoint
//     struct bpf_link * bpf_program__attach_tracepoint(struct bpf_program *prog, const char *tp_category, const char *tp_name)
func Bpf_program__attach_tracepoint(prog *Struct_bpf_program, tp_category string, tp_name string) *Struct_bpf_link {
	return C.bpf_program__attach_tracepoint()
}

// Bpf_program__attach_raw_tracepoint is a wrapper of bpf_program__attach_raw_tracepoint
//     struct bpf_link * bpf_program__attach_raw_tracepoint(struct bpf_program *prog, const char *tp_name)
func Bpf_program__attach_raw_tracepoint(prog *Struct_bpf_program, tp_name string) *Struct_bpf_link {
	return C.bpf_program__attach_raw_tracepoint()
}

// Bpf_program__attach_trace is a wrapper of bpf_program__attach_trace
//     struct bpf_link * bpf_program__attach_trace(struct bpf_program *prog)
func Bpf_program__attach_trace(prog *Struct_bpf_program) *Struct_bpf_link {
	return C.bpf_program__attach_trace()
}

// Bpf_program__attach_lsm is a wrapper of bpf_program__attach_lsm
//     struct bpf_link * bpf_program__attach_lsm(struct bpf_program *prog)
func Bpf_program__attach_lsm(prog *Struct_bpf_program) *Struct_bpf_link {
	return C.bpf_program__attach_lsm()
}

// Bpf_program__attach_cgroup is a wrapper of bpf_program__attach_cgroup
//     struct bpf_link * bpf_program__attach_cgroup(struct bpf_program *prog, int cgroup_fd)
func Bpf_program__attach_cgroup(prog *Struct_bpf_program, cgroup_fd int32) *Struct_bpf_link {
	return C.bpf_program__attach_cgroup()
}

// Bpf_program__attach_netns is a wrapper of bpf_program__attach_netns
//     struct bpf_link * bpf_program__attach_netns(struct bpf_program *prog, int netns_fd)
func Bpf_program__attach_netns(prog *Struct_bpf_program, netns_fd int32) *Struct_bpf_link {
	return C.bpf_program__attach_netns()
}

// Bpf_program__attach_xdp is a wrapper of bpf_program__attach_xdp
//     struct bpf_link * bpf_program__attach_xdp(struct bpf_program *prog, int ifindex)
func Bpf_program__attach_xdp(prog *Struct_bpf_program, ifindex int32) *Struct_bpf_link {
	return C.bpf_program__attach_xdp()
}

// Bpf_program__attach_freplace is a wrapper of bpf_program__attach_freplace
//     struct bpf_link * bpf_program__attach_freplace(struct bpf_program *prog, int target_fd, const char *attach_func_name)
func Bpf_program__attach_freplace(prog *Struct_bpf_program, target_fd int32, attach_func_name string) *Struct_bpf_link {
	return C.bpf_program__attach_freplace()
}

// Bpf_map__attach_struct_ops is a wrapper of bpf_map__attach_struct_ops
//     struct bpf_link *bpf_map__attach_struct_ops(struct bpf_map *map)
func Bpf_map__attach_struct_ops(map_ *Struct_bpf_map) *Struct_bpf_link {
	return C.bpf_map__attach_struct_ops()
}

// Bpf_program__attach_iter is a wrapper of bpf_program__attach_iter
//     struct bpf_link * bpf_program__attach_iter(struct bpf_program *prog, const struct bpf_iter_attach_opts *opts)
func Bpf_program__attach_iter(prog *Struct_bpf_program, opts *Struct_bpf_iter_attach_opts) *Struct_bpf_link {
	return C.bpf_program__attach_iter()
}

// Bpf_program__set_prep is a wrapper of bpf_program__set_prep
//     int bpf_program__set_prep(struct bpf_program *prog, int nr_instance, bpf_program_prep_t prep)
func Bpf_program__set_prep(prog *Struct_bpf_program, nr_instance int32, prep C.bpf_program_prep_t) int32 {
	return C.bpf_program__set_prep()
}

// Bpf_program__nth_fd is a wrapper of bpf_program__nth_fd
//     int bpf_program__nth_fd(const struct bpf_program *prog, int n)
func Bpf_program__nth_fd(prog *Struct_bpf_program, n int32) int32 {
	return C.bpf_program__nth_fd()
}

// Bpf_program__set_socket_filter is a wrapper of bpf_program__set_socket_filter
//     int bpf_program__set_socket_filter(struct bpf_program *prog)
func Bpf_program__set_socket_filter(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_socket_filter()
}

// Bpf_program__set_tracepoint is a wrapper of bpf_program__set_tracepoint
//     int bpf_program__set_tracepoint(struct bpf_program *prog)
func Bpf_program__set_tracepoint(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_tracepoint()
}

// Bpf_program__set_raw_tracepoint is a wrapper of bpf_program__set_raw_tracepoint
//     int bpf_program__set_raw_tracepoint(struct bpf_program *prog)
func Bpf_program__set_raw_tracepoint(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_raw_tracepoint()
}

// Bpf_program__set_kprobe is a wrapper of bpf_program__set_kprobe
//     int bpf_program__set_kprobe(struct bpf_program *prog)
func Bpf_program__set_kprobe(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_kprobe()
}

// Bpf_program__set_lsm is a wrapper of bpf_program__set_lsm
//     int bpf_program__set_lsm(struct bpf_program *prog)
func Bpf_program__set_lsm(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_lsm()
}

// Bpf_program__set_sched_cls is a wrapper of bpf_program__set_sched_cls
//     int bpf_program__set_sched_cls(struct bpf_program *prog)
func Bpf_program__set_sched_cls(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_sched_cls()
}

// Bpf_program__set_sched_act is a wrapper of bpf_program__set_sched_act
//     int bpf_program__set_sched_act(struct bpf_program *prog)
func Bpf_program__set_sched_act(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_sched_act()
}

// Bpf_program__set_xdp is a wrapper of bpf_program__set_xdp
//     int bpf_program__set_xdp(struct bpf_program *prog)
func Bpf_program__set_xdp(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_xdp()
}

// Bpf_program__set_perf_event is a wrapper of bpf_program__set_perf_event
//     int bpf_program__set_perf_event(struct bpf_program *prog)
func Bpf_program__set_perf_event(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_perf_event()
}

// Bpf_program__set_tracing is a wrapper of bpf_program__set_tracing
//     int bpf_program__set_tracing(struct bpf_program *prog)
func Bpf_program__set_tracing(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_tracing()
}

// Bpf_program__set_struct_ops is a wrapper of bpf_program__set_struct_ops
//     int bpf_program__set_struct_ops(struct bpf_program *prog)
func Bpf_program__set_struct_ops(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_struct_ops()
}

// Bpf_program__set_extension is a wrapper of bpf_program__set_extension
//     int bpf_program__set_extension(struct bpf_program *prog)
func Bpf_program__set_extension(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_extension()
}

// Bpf_program__set_sk_lookup is a wrapper of bpf_program__set_sk_lookup
//     int bpf_program__set_sk_lookup(struct bpf_program *prog)
func Bpf_program__set_sk_lookup(prog *Struct_bpf_program) int32 {
	return C.bpf_program__set_sk_lookup()
}

// Bpf_program__get_type is a wrapper of bpf_program__get_type
//     enum bpf_prog_type bpf_program__get_type(const struct bpf_program *prog)
func Bpf_program__get_type(prog *Struct_bpf_program) Enum_bpf_prog_type {
	return C.bpf_program__get_type()
}

// Bpf_program__set_type is a wrapper of bpf_program__set_type
//     void bpf_program__set_type(struct bpf_program *prog, enum bpf_prog_type type)
func Bpf_program__set_type(prog *Struct_bpf_program, type_ Enum_bpf_prog_type)  {
	return C.bpf_program__set_type()
}

// Bpf_program__get_expected_attach_type is a wrapper of bpf_program__get_expected_attach_type
//     enum bpf_attach_type bpf_program__get_expected_attach_type(const struct bpf_program *prog)
func Bpf_program__get_expected_attach_type(prog *Struct_bpf_program) Enum_bpf_attach_type {
	return C.bpf_program__get_expected_attach_type()
}

// Bpf_program__set_expected_attach_type is a wrapper of bpf_program__set_expected_attach_type
//     void bpf_program__set_expected_attach_type(struct bpf_program *prog, enum bpf_attach_type type)
func Bpf_program__set_expected_attach_type(prog *Struct_bpf_program, type_ Enum_bpf_attach_type)  {
	return C.bpf_program__set_expected_attach_type()
}

// Bpf_program__set_attach_target is a wrapper of bpf_program__set_attach_target
//     int bpf_program__set_attach_target(struct bpf_program *prog, int attach_prog_fd, const char *attach_func_name)
func Bpf_program__set_attach_target(prog *Struct_bpf_program, attach_prog_fd int32, attach_func_name string) int32 {
	return C.bpf_program__set_attach_target()
}

// Bpf_program__is_socket_filter is a wrapper of bpf_program__is_socket_filter
//     bool bpf_program__is_socket_filter(const struct bpf_program *prog)
func Bpf_program__is_socket_filter(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_socket_filter()
}

// Bpf_program__is_tracepoint is a wrapper of bpf_program__is_tracepoint
//     bool bpf_program__is_tracepoint(const struct bpf_program *prog)
func Bpf_program__is_tracepoint(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_tracepoint()
}

// Bpf_program__is_raw_tracepoint is a wrapper of bpf_program__is_raw_tracepoint
//     bool bpf_program__is_raw_tracepoint(const struct bpf_program *prog)
func Bpf_program__is_raw_tracepoint(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_raw_tracepoint()
}

// Bpf_program__is_kprobe is a wrapper of bpf_program__is_kprobe
//     bool bpf_program__is_kprobe(const struct bpf_program *prog)
func Bpf_program__is_kprobe(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_kprobe()
}

// Bpf_program__is_lsm is a wrapper of bpf_program__is_lsm
//     bool bpf_program__is_lsm(const struct bpf_program *prog)
func Bpf_program__is_lsm(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_lsm()
}

// Bpf_program__is_sched_cls is a wrapper of bpf_program__is_sched_cls
//     bool bpf_program__is_sched_cls(const struct bpf_program *prog)
func Bpf_program__is_sched_cls(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_sched_cls()
}

// Bpf_program__is_sched_act is a wrapper of bpf_program__is_sched_act
//     bool bpf_program__is_sched_act(const struct bpf_program *prog)
func Bpf_program__is_sched_act(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_sched_act()
}

// Bpf_program__is_xdp is a wrapper of bpf_program__is_xdp
//     bool bpf_program__is_xdp(const struct bpf_program *prog)
func Bpf_program__is_xdp(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_xdp()
}

// Bpf_program__is_perf_event is a wrapper of bpf_program__is_perf_event
//     bool bpf_program__is_perf_event(const struct bpf_program *prog)
func Bpf_program__is_perf_event(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_perf_event()
}

// Bpf_program__is_tracing is a wrapper of bpf_program__is_tracing
//     bool bpf_program__is_tracing(const struct bpf_program *prog)
func Bpf_program__is_tracing(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_tracing()
}

// Bpf_program__is_struct_ops is a wrapper of bpf_program__is_struct_ops
//     bool bpf_program__is_struct_ops(const struct bpf_program *prog)
func Bpf_program__is_struct_ops(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_struct_ops()
}

// Bpf_program__is_extension is a wrapper of bpf_program__is_extension
//     bool bpf_program__is_extension(const struct bpf_program *prog)
func Bpf_program__is_extension(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_extension()
}

// Bpf_program__is_sk_lookup is a wrapper of bpf_program__is_sk_lookup
//     bool bpf_program__is_sk_lookup(const struct bpf_program *prog)
func Bpf_program__is_sk_lookup(prog *Struct_bpf_program) bool {
	return C.bpf_program__is_sk_lookup()
}

// Bpf_object__find_map_by_name is a wrapper of bpf_object__find_map_by_name
//     struct bpf_map * bpf_object__find_map_by_name(const struct bpf_object *obj, const char *name)
func Bpf_object__find_map_by_name(obj *Struct_bpf_object, name string) *Struct_bpf_map {
	return C.bpf_object__find_map_by_name()
}

// Bpf_object__find_map_fd_by_name is a wrapper of bpf_object__find_map_fd_by_name
//     int bpf_object__find_map_fd_by_name(const struct bpf_object *obj, const char *name)
func Bpf_object__find_map_fd_by_name(obj *Struct_bpf_object, name string) int32 {
	return C.bpf_object__find_map_fd_by_name()
}

// Bpf_object__find_map_by_offset is a wrapper of bpf_object__find_map_by_offset
//     struct bpf_map * bpf_object__find_map_by_offset(struct bpf_object *obj, size_t offset)
func Bpf_object__find_map_by_offset(obj *Struct_bpf_object, offset uint) *Struct_bpf_map {
	return C.bpf_object__find_map_by_offset()
}

// Bpf_map__next is a wrapper of bpf_map__next
//     struct bpf_map * bpf_map__next(const struct bpf_map *map, const struct bpf_object *obj)
func Bpf_map__next(map_ *Struct_bpf_map, obj *Struct_bpf_object) *Struct_bpf_map {
	return C.bpf_map__next()
}

// Bpf_map__prev is a wrapper of bpf_map__prev
//     struct bpf_map * bpf_map__prev(const struct bpf_map *map, const struct bpf_object *obj)
func Bpf_map__prev(map_ *Struct_bpf_map, obj *Struct_bpf_object) *Struct_bpf_map {
	return C.bpf_map__prev()
}

// Bpf_map__fd is a wrapper of bpf_map__fd
//     int bpf_map__fd(const struct bpf_map *map)
func Bpf_map__fd(map_ *Struct_bpf_map) int32 {
	return C.bpf_map__fd()
}

// Bpf_map__reuse_fd is a wrapper of bpf_map__reuse_fd
//     int bpf_map__reuse_fd(struct bpf_map *map, int fd)
func Bpf_map__reuse_fd(map_ *Struct_bpf_map, fd int32) int32 {
	return C.bpf_map__reuse_fd()
}

// Bpf_map__def is a wrapper of bpf_map__def
//     const struct bpf_map_def *bpf_map__def(const struct bpf_map *map)
func Bpf_map__def(map_ *Struct_bpf_map) *Struct_bpf_map_def {
	return C.bpf_map__def()
}

// Bpf_map__name is a wrapper of bpf_map__name
//     const char *bpf_map__name(const struct bpf_map *map)
func Bpf_map__name(map_ *Struct_bpf_map) string {
	return C.bpf_map__name()
}

// Bpf_map__type is a wrapper of bpf_map__type
//     enum bpf_map_type bpf_map__type(const struct bpf_map *map)
func Bpf_map__type(map_ *Struct_bpf_map) Enum_bpf_map_type {
	return C.bpf_map__type()
}

// Bpf_map__set_type is a wrapper of bpf_map__set_type
//     int bpf_map__set_type(struct bpf_map *map, enum bpf_map_type type)
func Bpf_map__set_type(map_ *Struct_bpf_map, type_ Enum_bpf_map_type) int32 {
	return C.bpf_map__set_type()
}

// Bpf_map__max_entries is a wrapper of bpf_map__max_entries
//     __u32 bpf_map__max_entries(const struct bpf_map *map)
func Bpf_map__max_entries(map_ *Struct_bpf_map) uint32 {
	return C.bpf_map__max_entries()
}

// Bpf_map__set_max_entries is a wrapper of bpf_map__set_max_entries
//     int bpf_map__set_max_entries(struct bpf_map *map, __u32 max_entries)
func Bpf_map__set_max_entries(map_ *Struct_bpf_map, max_entries uint32) int32 {
	return C.bpf_map__set_max_entries()
}

// Bpf_map__resize is a wrapper of bpf_map__resize
//     int bpf_map__resize(struct bpf_map *map, __u32 max_entries)
func Bpf_map__resize(map_ *Struct_bpf_map, max_entries uint32) int32 {
	return C.bpf_map__resize()
}

// Bpf_map__map_flags is a wrapper of bpf_map__map_flags
//     __u32 bpf_map__map_flags(const struct bpf_map *map)
func Bpf_map__map_flags(map_ *Struct_bpf_map) uint32 {
	return C.bpf_map__map_flags()
}

// Bpf_map__set_map_flags is a wrapper of bpf_map__set_map_flags
//     int bpf_map__set_map_flags(struct bpf_map *map, __u32 flags)
func Bpf_map__set_map_flags(map_ *Struct_bpf_map, flags uint32) int32 {
	return C.bpf_map__set_map_flags()
}

// Bpf_map__numa_node is a wrapper of bpf_map__numa_node
//     __u32 bpf_map__numa_node(const struct bpf_map *map)
func Bpf_map__numa_node(map_ *Struct_bpf_map) uint32 {
	return C.bpf_map__numa_node()
}

// Bpf_map__set_numa_node is a wrapper of bpf_map__set_numa_node
//     int bpf_map__set_numa_node(struct bpf_map *map, __u32 numa_node)
func Bpf_map__set_numa_node(map_ *Struct_bpf_map, numa_node uint32) int32 {
	return C.bpf_map__set_numa_node()
}

// Bpf_map__key_size is a wrapper of bpf_map__key_size
//     __u32 bpf_map__key_size(const struct bpf_map *map)
func Bpf_map__key_size(map_ *Struct_bpf_map) uint32 {
	return C.bpf_map__key_size()
}

// Bpf_map__set_key_size is a wrapper of bpf_map__set_key_size
//     int bpf_map__set_key_size(struct bpf_map *map, __u32 size)
func Bpf_map__set_key_size(map_ *Struct_bpf_map, size uint32) int32 {
	return C.bpf_map__set_key_size()
}

// Bpf_map__value_size is a wrapper of bpf_map__value_size
//     __u32 bpf_map__value_size(const struct bpf_map *map)
func Bpf_map__value_size(map_ *Struct_bpf_map) uint32 {
	return C.bpf_map__value_size()
}

// Bpf_map__set_value_size is a wrapper of bpf_map__set_value_size
//     int bpf_map__set_value_size(struct bpf_map *map, __u32 size)
func Bpf_map__set_value_size(map_ *Struct_bpf_map, size uint32) int32 {
	return C.bpf_map__set_value_size()
}

// Bpf_map__btf_key_type_id is a wrapper of bpf_map__btf_key_type_id
//     __u32 bpf_map__btf_key_type_id(const struct bpf_map *map)
func Bpf_map__btf_key_type_id(map_ *Struct_bpf_map) uint32 {
	return C.bpf_map__btf_key_type_id()
}

// Bpf_map__btf_value_type_id is a wrapper of bpf_map__btf_value_type_id
//     __u32 bpf_map__btf_value_type_id(const struct bpf_map *map)
func Bpf_map__btf_value_type_id(map_ *Struct_bpf_map) uint32 {
	return C.bpf_map__btf_value_type_id()
}

// Bpf_map__ifindex is a wrapper of bpf_map__ifindex
//     __u32 bpf_map__ifindex(const struct bpf_map *map)
func Bpf_map__ifindex(map_ *Struct_bpf_map) uint32 {
	return C.bpf_map__ifindex()
}

// Bpf_map__set_ifindex is a wrapper of bpf_map__set_ifindex
//     int bpf_map__set_ifindex(struct bpf_map *map, __u32 ifindex)
func Bpf_map__set_ifindex(map_ *Struct_bpf_map, ifindex uint32) int32 {
	return C.bpf_map__set_ifindex()
}

// Bpf_map__set_priv is a wrapper of bpf_map__set_priv
//     int bpf_map__set_priv(struct bpf_map *map, void *priv, bpf_map_clear_priv_t clear_priv)
func Bpf_map__set_priv(map_ *Struct_bpf_map, priv unsafe.Pointer, clear_priv C.bpf_map_clear_priv_t) int32 {
	return C.bpf_map__set_priv()
}

// Bpf_map__priv is a wrapper of bpf_map__priv
//     void *bpf_map__priv(const struct bpf_map *map)
func Bpf_map__priv(map_ *Struct_bpf_map) unsafe.Pointer {
	return C.bpf_map__priv()
}

// Bpf_map__set_initial_value is a wrapper of bpf_map__set_initial_value
//     int bpf_map__set_initial_value(struct bpf_map *map, const void *data, size_t size)
func Bpf_map__set_initial_value(map_ *Struct_bpf_map, data unsafe.Pointer, size uint) int32 {
	return C.bpf_map__set_initial_value()
}

// Bpf_map__is_offload_neutral is a wrapper of bpf_map__is_offload_neutral
//     bool bpf_map__is_offload_neutral(const struct bpf_map *map)
func Bpf_map__is_offload_neutral(map_ *Struct_bpf_map) bool {
	return C.bpf_map__is_offload_neutral()
}

// Bpf_map__is_internal is a wrapper of bpf_map__is_internal
//     bool bpf_map__is_internal(const struct bpf_map *map)
func Bpf_map__is_internal(map_ *Struct_bpf_map) bool {
	return C.bpf_map__is_internal()
}

// Bpf_map__set_pin_path is a wrapper of bpf_map__set_pin_path
//     int bpf_map__set_pin_path(struct bpf_map *map, const char *path)
func Bpf_map__set_pin_path(map_ *Struct_bpf_map, path string) int32 {
	return C.bpf_map__set_pin_path()
}

// Bpf_map__get_pin_path is a wrapper of bpf_map__get_pin_path
//     const char *bpf_map__get_pin_path(const struct bpf_map *map)
func Bpf_map__get_pin_path(map_ *Struct_bpf_map) string {
	return C.bpf_map__get_pin_path()
}

// Bpf_map__is_pinned is a wrapper of bpf_map__is_pinned
//     bool bpf_map__is_pinned(const struct bpf_map *map)
func Bpf_map__is_pinned(map_ *Struct_bpf_map) bool {
	return C.bpf_map__is_pinned()
}

// Bpf_map__pin is a wrapper of bpf_map__pin
//     int bpf_map__pin(struct bpf_map *map, const char *path)
func Bpf_map__pin(map_ *Struct_bpf_map, path string) int32 {
	return C.bpf_map__pin()
}

// Bpf_map__unpin is a wrapper of bpf_map__unpin
//     int bpf_map__unpin(struct bpf_map *map, const char *path)
func Bpf_map__unpin(map_ *Struct_bpf_map, path string) int32 {
	return C.bpf_map__unpin()
}

// Bpf_map__set_inner_map_fd is a wrapper of bpf_map__set_inner_map_fd
//     int bpf_map__set_inner_map_fd(struct bpf_map *map, int fd)
func Bpf_map__set_inner_map_fd(map_ *Struct_bpf_map, fd int32) int32 {
	return C.bpf_map__set_inner_map_fd()
}

// Libbpf_get_error is a wrapper of libbpf_get_error
//     long libbpf_get_error(const void *ptr)
func Libbpf_get_error(ptr unsafe.Pointer) int64 {
	return C.libbpf_get_error()
}

// Bpf_prog_load_xattr is a wrapper of bpf_prog_load_xattr
//     int bpf_prog_load_xattr(const struct bpf_prog_load_attr *attr, struct bpf_object **pobj, int *prog_fd)
func Bpf_prog_load_xattr(attr *Struct_bpf_prog_load_attr, pobj *Struct_bpf_object, prog_fd *int32) int32 {
	return C.bpf_prog_load_xattr()
}

// Bpf_prog_load is a wrapper of bpf_prog_load
//     int bpf_prog_load(const char *file, enum bpf_prog_type type, struct bpf_object **pobj, int *prog_fd)
func Bpf_prog_load(file string, type_ Enum_bpf_prog_type, pobj *Struct_bpf_object, prog_fd *int32) int32 {
	return C.bpf_prog_load()
}

// Bpf_set_link_xdp_fd is a wrapper of bpf_set_link_xdp_fd
//     int bpf_set_link_xdp_fd(int ifindex, int fd, __u32 flags)
func Bpf_set_link_xdp_fd(ifindex int32, fd int32, flags uint32) int32 {
	return C.bpf_set_link_xdp_fd()
}

// Bpf_set_link_xdp_fd_opts is a wrapper of bpf_set_link_xdp_fd_opts
//     int bpf_set_link_xdp_fd_opts(int ifindex, int fd, __u32 flags, const struct bpf_xdp_set_link_opts *opts)
func Bpf_set_link_xdp_fd_opts(ifindex int32, fd int32, flags uint32, opts *Struct_bpf_xdp_set_link_opts) int32 {
	return C.bpf_set_link_xdp_fd_opts()
}

// Bpf_get_link_xdp_id is a wrapper of bpf_get_link_xdp_id
//     int bpf_get_link_xdp_id(int ifindex, __u32 *prog_id, __u32 flags)
func Bpf_get_link_xdp_id(ifindex int32, prog_id *uint32, flags uint32) int32 {
	return C.bpf_get_link_xdp_id()
}

// Bpf_get_link_xdp_info is a wrapper of bpf_get_link_xdp_info
//     int bpf_get_link_xdp_info(int ifindex, struct xdp_link_info *info, size_t info_size, __u32 flags)
func Bpf_get_link_xdp_info(ifindex int32, info *Struct_xdp_link_info, info_size uint, flags uint32) int32 {
	return C.bpf_get_link_xdp_info()
}

// Ring_buffer__new is a wrapper of ring_buffer__new
//     struct ring_buffer * ring_buffer__new(int map_fd, ring_buffer_sample_fn sample_cb, void *ctx, const struct ring_buffer_opts *opts)
func Ring_buffer__new(map_fd int32, sample_cb C.ring_buffer_sample_fn, ctx unsafe.Pointer, opts *Struct_ring_buffer_opts) *Struct_ring_buffer {
	return C.ring_buffer__new()
}

// Ring_buffer__free is a wrapper of ring_buffer__free
//     void ring_buffer__free(struct ring_buffer *rb)
func Ring_buffer__free(rb *Struct_ring_buffer)  {
	return C.ring_buffer__free()
}

// Ring_buffer__add is a wrapper of ring_buffer__add
//     int ring_buffer__add(struct ring_buffer *rb, int map_fd, ring_buffer_sample_fn sample_cb, void *ctx)
func Ring_buffer__add(rb *Struct_ring_buffer, map_fd int32, sample_cb C.ring_buffer_sample_fn, ctx unsafe.Pointer) int32 {
	return C.ring_buffer__add()
}

// Ring_buffer__poll is a wrapper of ring_buffer__poll
//     int ring_buffer__poll(struct ring_buffer *rb, int timeout_ms)
func Ring_buffer__poll(rb *Struct_ring_buffer, timeout_ms int32) int32 {
	return C.ring_buffer__poll()
}

// Ring_buffer__consume is a wrapper of ring_buffer__consume
//     int ring_buffer__consume(struct ring_buffer *rb)
func Ring_buffer__consume(rb *Struct_ring_buffer) int32 {
	return C.ring_buffer__consume()
}

// Ring_buffer__epoll_fd is a wrapper of ring_buffer__epoll_fd
//     int ring_buffer__epoll_fd(const struct ring_buffer *rb)
func Ring_buffer__epoll_fd(rb *Struct_ring_buffer) int32 {
	return C.ring_buffer__epoll_fd()
}

// Perf_buffer__new is a wrapper of perf_buffer__new
//     struct perf_buffer * perf_buffer__new(int map_fd, size_t page_cnt, const struct perf_buffer_opts *opts)
func Perf_buffer__new(map_fd int32, page_cnt uint, opts *Struct_perf_buffer_opts) *Struct_perf_buffer {
	return C.perf_buffer__new()
}

// Perf_buffer__new_raw is a wrapper of perf_buffer__new_raw
//     struct perf_buffer * perf_buffer__new_raw(int map_fd, size_t page_cnt, const struct perf_buffer_raw_opts *opts)
func Perf_buffer__new_raw(map_fd int32, page_cnt uint, opts *Struct_perf_buffer_raw_opts) *Struct_perf_buffer {
	return C.perf_buffer__new_raw()
}

// Perf_buffer__free is a wrapper of perf_buffer__free
//     void perf_buffer__free(struct perf_buffer *pb)
func Perf_buffer__free(pb *Struct_perf_buffer)  {
	return C.perf_buffer__free()
}

// Perf_buffer__epoll_fd is a wrapper of perf_buffer__epoll_fd
//     int perf_buffer__epoll_fd(const struct perf_buffer *pb)
func Perf_buffer__epoll_fd(pb *Struct_perf_buffer) int32 {
	return C.perf_buffer__epoll_fd()
}

// Perf_buffer__poll is a wrapper of perf_buffer__poll
//     int perf_buffer__poll(struct perf_buffer *pb, int timeout_ms)
func Perf_buffer__poll(pb *Struct_perf_buffer, timeout_ms int32) int32 {
	return C.perf_buffer__poll()
}

// Perf_buffer__consume is a wrapper of perf_buffer__consume
//     int perf_buffer__consume(struct perf_buffer *pb)
func Perf_buffer__consume(pb *Struct_perf_buffer) int32 {
	return C.perf_buffer__consume()
}

// Perf_buffer__consume_buffer is a wrapper of perf_buffer__consume_buffer
//     int perf_buffer__consume_buffer(struct perf_buffer *pb, size_t buf_idx)
func Perf_buffer__consume_buffer(pb *Struct_perf_buffer, buf_idx uint) int32 {
	return C.perf_buffer__consume_buffer()
}

// Perf_buffer__buffer_cnt is a wrapper of perf_buffer__buffer_cnt
//     size_t perf_buffer__buffer_cnt(const struct perf_buffer *pb)
func Perf_buffer__buffer_cnt(pb *Struct_perf_buffer) uint {
	return C.perf_buffer__buffer_cnt()
}

// Perf_buffer__buffer_fd is a wrapper of perf_buffer__buffer_fd
//     int perf_buffer__buffer_fd(const struct perf_buffer *pb, size_t buf_idx)
func Perf_buffer__buffer_fd(pb *Struct_perf_buffer, buf_idx uint) int32 {
	return C.perf_buffer__buffer_fd()
}

// Bpf_perf_event_read_simple is a wrapper of bpf_perf_event_read_simple
//     enum bpf_perf_event_ret bpf_perf_event_read_simple(void *mmap_mem, size_t mmap_size, size_t page_size, void **copy_mem, size_t *copy_size, bpf_perf_event_print_t fn, void *private_data)
func Bpf_perf_event_read_simple(mmap_mem unsafe.Pointer, mmap_size uint, page_size uint, copy_mem unsafe.Pointer, copy_size *uint, fn C.bpf_perf_event_print_t, private_data unsafe.Pointer) Enum_bpf_perf_event_ret {
	return C.bpf_perf_event_read_simple()
}

// Bpf_prog_linfo__free is a wrapper of bpf_prog_linfo__free
//     void bpf_prog_linfo__free(struct bpf_prog_linfo *prog_linfo)
func Bpf_prog_linfo__free(prog_linfo *Struct_bpf_prog_linfo)  {
	return C.bpf_prog_linfo__free()
}

// Bpf_prog_linfo__new is a wrapper of bpf_prog_linfo__new
//     struct bpf_prog_linfo * bpf_prog_linfo__new(const struct bpf_prog_info *info)
func Bpf_prog_linfo__new(info *Struct_bpf_prog_info) *Struct_bpf_prog_linfo {
	return C.bpf_prog_linfo__new()
}

// Bpf_prog_linfo__lfind_addr_func is a wrapper of bpf_prog_linfo__lfind_addr_func
//     const struct bpf_line_info * bpf_prog_linfo__lfind_addr_func(const struct bpf_prog_linfo *prog_linfo, __u64 addr, __u32 func_idx, __u32 nr_skip)
func Bpf_prog_linfo__lfind_addr_func(prog_linfo *Struct_bpf_prog_linfo, addr uint64, func_idx uint32, nr_skip uint32) *Struct_bpf_line_info {
	return C.bpf_prog_linfo__lfind_addr_func()
}

// Bpf_prog_linfo__lfind is a wrapper of bpf_prog_linfo__lfind
//     const struct bpf_line_info * bpf_prog_linfo__lfind(const struct bpf_prog_linfo *prog_linfo, __u32 insn_off, __u32 nr_skip)
func Bpf_prog_linfo__lfind(prog_linfo *Struct_bpf_prog_linfo, insn_off uint32, nr_skip uint32) *Struct_bpf_line_info {
	return C.bpf_prog_linfo__lfind()
}

// Bpf_probe_prog_type is a wrapper of bpf_probe_prog_type
//     bool bpf_probe_prog_type(enum bpf_prog_type prog_type, __u32 ifindex)
func Bpf_probe_prog_type(prog_type Enum_bpf_prog_type, ifindex uint32) bool {
	return C.bpf_probe_prog_type()
}

// Bpf_probe_map_type is a wrapper of bpf_probe_map_type
//     bool bpf_probe_map_type(enum bpf_map_type map_type, __u32 ifindex)
func Bpf_probe_map_type(map_type Enum_bpf_map_type, ifindex uint32) bool {
	return C.bpf_probe_map_type()
}

// Bpf_probe_helper is a wrapper of bpf_probe_helper
//     bool bpf_probe_helper(enum bpf_func_id id, enum bpf_prog_type prog_type, __u32 ifindex)
func Bpf_probe_helper(id Enum_bpf_func_id, prog_type Enum_bpf_prog_type, ifindex uint32) bool {
	return C.bpf_probe_helper()
}

// Bpf_probe_large_insn_limit is a wrapper of bpf_probe_large_insn_limit
//     bool bpf_probe_large_insn_limit(__u32 ifindex)
func Bpf_probe_large_insn_limit(ifindex uint32) bool {
	return C.bpf_probe_large_insn_limit()
}

// Bpf_program__get_prog_info_linear is a wrapper of bpf_program__get_prog_info_linear
//     struct bpf_prog_info_linear * bpf_program__get_prog_info_linear(int fd, __u64 arrays)
func Bpf_program__get_prog_info_linear(fd int32, arrays uint64) *Struct_bpf_prog_info_linear {
	return C.bpf_program__get_prog_info_linear()
}

// Bpf_program__bpil_addr_to_offs is a wrapper of bpf_program__bpil_addr_to_offs
//     void bpf_program__bpil_addr_to_offs(struct bpf_prog_info_linear *info_linear)
func Bpf_program__bpil_addr_to_offs(info_linear *Struct_bpf_prog_info_linear)  {
	return C.bpf_program__bpil_addr_to_offs()
}

// Bpf_program__bpil_offs_to_addr is a wrapper of bpf_program__bpil_offs_to_addr
//     void bpf_program__bpil_offs_to_addr(struct bpf_prog_info_linear *info_linear)
func Bpf_program__bpil_offs_to_addr(info_linear *Struct_bpf_prog_info_linear)  {
	return C.bpf_program__bpil_offs_to_addr()
}

// Libbpf_num_possible_cpus is a wrapper of libbpf_num_possible_cpus
//     int libbpf_num_possible_cpus(void)
func Libbpf_num_possible_cpus( ) int32 {
	return C.libbpf_num_possible_cpus()
}

// Bpf_object__open_skeleton is a wrapper of bpf_object__open_skeleton
//     int bpf_object__open_skeleton(struct bpf_object_skeleton *s, const struct bpf_object_open_opts *opts)
func Bpf_object__open_skeleton(s *Struct_bpf_object_skeleton, opts *Struct_bpf_object_open_opts) int32 {
	return C.bpf_object__open_skeleton()
}

// Bpf_object__load_skeleton is a wrapper of bpf_object__load_skeleton
//     int bpf_object__load_skeleton(struct bpf_object_skeleton *s)
func Bpf_object__load_skeleton(s *Struct_bpf_object_skeleton) int32 {
	return C.bpf_object__load_skeleton()
}

// Bpf_object__attach_skeleton is a wrapper of bpf_object__attach_skeleton
//     int bpf_object__attach_skeleton(struct bpf_object_skeleton *s)
func Bpf_object__attach_skeleton(s *Struct_bpf_object_skeleton) int32 {
	return C.bpf_object__attach_skeleton()
}

// Bpf_object__detach_skeleton is a wrapper of bpf_object__detach_skeleton
//     void bpf_object__detach_skeleton(struct bpf_object_skeleton *s)
func Bpf_object__detach_skeleton(s *Struct_bpf_object_skeleton)  {
	return C.bpf_object__detach_skeleton()
}

// Bpf_object__destroy_skeleton is a wrapper of bpf_object__destroy_skeleton
//     void bpf_object__destroy_skeleton(struct bpf_object_skeleton *s)
func Bpf_object__destroy_skeleton(s *Struct_bpf_object_skeleton)  {
	return C.bpf_object__destroy_skeleton()
}

// Bpf_linker__new is a wrapper of bpf_linker__new
//     struct bpf_linker *bpf_linker__new(const char *filename, struct bpf_linker_opts *opts)
func Bpf_linker__new(filename string, opts *Struct_bpf_linker_opts) *Struct_bpf_linker {
	return C.bpf_linker__new()
}

// Bpf_linker__add_file is a wrapper of bpf_linker__add_file
//     int bpf_linker__add_file(struct bpf_linker *linker, const char *filename)
func Bpf_linker__add_file(linker *Struct_bpf_linker, filename string) int32 {
	return C.bpf_linker__add_file()
}

// Bpf_linker__finalize is a wrapper of bpf_linker__finalize
//     int bpf_linker__finalize(struct bpf_linker *linker)
func Bpf_linker__finalize(linker *Struct_bpf_linker) int32 {
	return C.bpf_linker__finalize()
}

// Bpf_linker__free is a wrapper of bpf_linker__free
//     void bpf_linker__free(struct bpf_linker *linker)
func Bpf_linker__free(linker *Struct_bpf_linker)  {
	return C.bpf_linker__free()
}
