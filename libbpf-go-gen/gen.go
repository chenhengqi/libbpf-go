package main

import (
	"bytes"
	"io/ioutil"
	"path/filepath"
	"strings"
	"text/template"
)

const libbpfAPIAnnotation = "LIBBPF_API"

const codeTmpl = `// AUTOGENERATED BY LIBBPF-GO-GEN
// DO NOT EDIT
package libbpf

// #include <bpf/{{.Header}}>
import "C"

{{range $API := .APIs}}
// {{$API.GoName}} is a wrapper of {{$API.Name}}
//     {{$API.Raw}}
func {{$API.GoName}}({{range $Arg := .GoArgs}}{{$Arg.ArgName}} {{$Arg.TypeName}},{{end}}) {{$API.GoReturnType}} {
	return C.{{$API.Name}}({{range $Arg := .Args}}C.{{$Arg.TypeName}}({{$Arg.ArgName}}),{{end}})
}
{{end}}
`

type argSpec struct {
	TypeName  string
	ArgName   string
	IsPointer bool
	IsStruct  bool
	IsEnum    bool
	IsConst   bool
}

type funcSpec struct {
	Raw          string
	Name         string
	GoName       string
	ReturnType   string
	GoReturnType string
	Args         []*argSpec
	GoArgs       []*argSpec
}

type codeSpec struct {
	Header string
	APIs   []*funcSpec
}

func gen(defs [][]byte, srcFile, dest string) {
	destDir, err := filepath.Abs(dest)
	if err != nil {
		panic(err)
	}
	file := strings.TrimSuffix(srcFile, filepath.Ext(srcFile))
	destFile := filepath.Join(destDir, file+".go")
	codeDef := &codeSpec{
		Header: srcFile,
	}
	for _, def := range defs {
		spec := parse(def)
		codeDef.APIs = append(codeDef.APIs, spec)
	}

	t := template.Must(template.New("code").Parse(codeTmpl))
	buf := bytes.Buffer{}
	err = t.Execute(&buf, &codeDef)
	if err != nil {
		panic(err)
	}
	ioutil.WriteFile(destFile, buf.Bytes(), 0644)
}

func parse(data []byte) *funcSpec {
	lines := strings.Split(string(data), "\n")
	for i, line := range lines {
		line = strings.TrimPrefix(line, libbpfAPIAnnotation)
		lines[i] = strings.TrimSpace(line)
	}
	fn := strings.Join(lines, " ")
	return parseFuncSpec(fn)
}

func parseFuncSpec(raw string) *funcSpec {
	return &funcSpec{
		Raw:          raw,
		Name:         "btf__get_raw_data",
		GoName:       "Btf__get_raw_data",
		ReturnType:   "int",
		GoReturnType: "int32",
		Args: []*argSpec{
			{
				TypeName: "int",
				ArgName:  "foo",
			},
			{
				TypeName: "int",
				ArgName:  "bar",
			},
		},
		GoArgs: []*argSpec{
			{
				TypeName: "int32",
				ArgName:  "foo",
			},
			{
				TypeName: "int32",
				ArgName:  "bar",
			},
		},
	}
}
